
obj/boot/main.o:     file format elf32-i386


Disassembly of section .text:

00000000 <waitdisk>:
	}
}

void
waitdisk(void)
{
   0:	55                   	push   %ebp

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
   1:	ba f7 01 00 00       	mov    $0x1f7,%edx
   6:	89 e5                	mov    %esp,%ebp
   8:	ec                   	in     (%dx),%al
	// wait for disk reaady
	while ((inb(0x1F7) & 0xC0) != 0x40)
   9:	25 c0 00 00 00       	and    $0xc0,%eax
   e:	83 f8 40             	cmp    $0x40,%eax
  11:	75 f5                	jne    8 <waitdisk+0x8>
		/* do nothing */;
}
  13:	5d                   	pop    %ebp
  14:	c3                   	ret    

00000015 <readsect>:

void
readsect(void *dst, uint32_t offset)
{
  15:	55                   	push   %ebp
  16:	ba f7 01 00 00       	mov    $0x1f7,%edx
  1b:	89 e5                	mov    %esp,%ebp
  1d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
  20:	57                   	push   %edi
  21:	ec                   	in     (%dx),%al

void
waitdisk(void)
{
	// wait for disk reaady
	while ((inb(0x1F7) & 0xC0) != 0x40)
  22:	25 c0 00 00 00       	and    $0xc0,%eax
  27:	83 f8 40             	cmp    $0x40,%eax
  2a:	75 f5                	jne    21 <readsect+0xc>
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  2c:	ba f2 01 00 00       	mov    $0x1f2,%edx
  31:	b0 01                	mov    $0x1,%al
  33:	ee                   	out    %al,(%dx)
  34:	b2 f3                	mov    $0xf3,%dl
  36:	88 c8                	mov    %cl,%al
  38:	ee                   	out    %al,(%dx)
  39:	89 c8                	mov    %ecx,%eax
  3b:	b2 f4                	mov    $0xf4,%dl
  3d:	c1 e8 08             	shr    $0x8,%eax
  40:	ee                   	out    %al,(%dx)
  41:	89 c8                	mov    %ecx,%eax
  43:	b2 f5                	mov    $0xf5,%dl
  45:	c1 e8 10             	shr    $0x10,%eax
  48:	ee                   	out    %al,(%dx)
  49:	c1 e9 18             	shr    $0x18,%ecx
  4c:	b2 f6                	mov    $0xf6,%dl
  4e:	88 c8                	mov    %cl,%al
  50:	83 c8 e0             	or     $0xffffffe0,%eax
  53:	ee                   	out    %al,(%dx)
  54:	b0 20                	mov    $0x20,%al
  56:	b2 f7                	mov    $0xf7,%dl
  58:	ee                   	out    %al,(%dx)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  59:	ec                   	in     (%dx),%al
  5a:	25 c0 00 00 00       	and    $0xc0,%eax
  5f:	83 f8 40             	cmp    $0x40,%eax
  62:	75 f5                	jne    59 <readsect+0x44>
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  64:	8b 7d 08             	mov    0x8(%ebp),%edi
  67:	b9 80 00 00 00       	mov    $0x80,%ecx
  6c:	ba f0 01 00 00       	mov    $0x1f0,%edx
  71:	fc                   	cld    
  72:	f2 6d                	repnz insl (%dx),%es:(%edi)
	// wait for disk to be ready
	waitdisk();

	// read a sector
	insl(0x1F0, dst, SECTSIZE/4);
}
  74:	5f                   	pop    %edi
  75:	5d                   	pop    %ebp
  76:	c3                   	ret    

00000077 <readseg>:

// Read 'count' bytes at 'offset' from kernel into virtual address 'va'.
// Might copy more than asked
void
readseg(uint32_t va, uint32_t count, uint32_t offset)
{
  77:	55                   	push   %ebp
  78:	89 e5                	mov    %esp,%ebp
  7a:	57                   	push   %edi
  7b:	56                   	push   %esi
  7c:	8b 75 10             	mov    0x10(%ebp),%esi
  7f:	53                   	push   %ebx
  80:	8b 5d 08             	mov    0x8(%ebp),%ebx
	
	// round down to sector boundary
	va &= ~(SECTSIZE - 1);

	// translate from bytes to sectors, and kernel starts at sector 1
	offset = (offset / SECTSIZE) + 1;
  83:	c1 ee 09             	shr    $0x9,%esi
void
readseg(uint32_t va, uint32_t count, uint32_t offset)
{
	uint32_t end_va;

	va &= 0xFFFFFF;
  86:	89 df                	mov    %ebx,%edi
	
	// round down to sector boundary
	va &= ~(SECTSIZE - 1);

	// translate from bytes to sectors, and kernel starts at sector 1
	offset = (offset / SECTSIZE) + 1;
  88:	46                   	inc    %esi
void
readseg(uint32_t va, uint32_t count, uint32_t offset)
{
	uint32_t end_va;

	va &= 0xFFFFFF;
  89:	81 e7 ff ff ff 00    	and    $0xffffff,%edi
	end_va = va + count;
	
	// round down to sector boundary
	va &= ~(SECTSIZE - 1);
  8f:	81 e3 00 fe ff 00    	and    $0xfffe00,%ebx
readseg(uint32_t va, uint32_t count, uint32_t offset)
{
	uint32_t end_va;

	va &= 0xFFFFFF;
	end_va = va + count;
  95:	03 7d 0c             	add    0xc(%ebp),%edi
	offset = (offset / SECTSIZE) + 1;

	// If this is too slow, we could read lots of sectors at a time.
	// We'd write more to memory than asked, but it doesn't matter --
	// we load in increasing order.
	while (va < end_va) {
  98:	eb 10                	jmp    aa <readseg+0x33>
		readsect((uint8_t*) va, offset);
  9a:	56                   	push   %esi
		va += SECTSIZE;
		offset++;
  9b:	46                   	inc    %esi

	// If this is too slow, we could read lots of sectors at a time.
	// We'd write more to memory than asked, but it doesn't matter --
	// we load in increasing order.
	while (va < end_va) {
		readsect((uint8_t*) va, offset);
  9c:	53                   	push   %ebx
		va += SECTSIZE;
  9d:	81 c3 00 02 00 00    	add    $0x200,%ebx

	// If this is too slow, we could read lots of sectors at a time.
	// We'd write more to memory than asked, but it doesn't matter --
	// we load in increasing order.
	while (va < end_va) {
		readsect((uint8_t*) va, offset);
  a3:	e8 fc ff ff ff       	call   a4 <readseg+0x2d>
		va += SECTSIZE;
		offset++;
  a8:	58                   	pop    %eax
  a9:	5a                   	pop    %edx
	offset = (offset / SECTSIZE) + 1;

	// If this is too slow, we could read lots of sectors at a time.
	// We'd write more to memory than asked, but it doesn't matter --
	// we load in increasing order.
	while (va < end_va) {
  aa:	39 fb                	cmp    %edi,%ebx
  ac:	72 ec                	jb     9a <readseg+0x23>
		readsect((uint8_t*) va, offset);
		va += SECTSIZE;
		offset++;
	}
}
  ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
  b1:	5b                   	pop    %ebx
  b2:	5e                   	pop    %esi
  b3:	5f                   	pop    %edi
  b4:	5d                   	pop    %ebp
  b5:	c3                   	ret    

000000b6 <cmain>:
void readsect(void*, uint32_t);
void readseg(uint32_t, uint32_t, uint32_t);

void
cmain(void)
{
  b6:	55                   	push   %ebp
  b7:	89 e5                	mov    %esp,%ebp
  b9:	56                   	push   %esi
  ba:	53                   	push   %ebx
	struct Proghdr *ph, *eph;

	// read 1st page off disk
	readseg((uint32_t) ELFHDR, SECTSIZE*8, 0);
  bb:	6a 00                	push   $0x0
  bd:	68 00 10 00 00       	push   $0x1000
  c2:	68 00 00 01 00       	push   $0x10000
  c7:	e8 fc ff ff ff       	call   c8 <cmain+0x12>

	// is this a valid ELF?
	if (ELFHDR->e_magic != ELF_MAGIC)
  cc:	83 c4 0c             	add    $0xc,%esp
  cf:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
  d6:	45 4c 46 
  d9:	75 3f                	jne    11a <cmain+0x64>
		goto bad;

	// load each program segment (ignores ph flags)
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
  db:	8b 1d 1c 00 01 00    	mov    0x1001c,%ebx
	eph = ph + ELFHDR->e_phnum;
  e1:	0f b7 05 2c 00 01 00 	movzwl 0x1002c,%eax
	// is this a valid ELF?
	if (ELFHDR->e_magic != ELF_MAGIC)
		goto bad;

	// load each program segment (ignores ph flags)
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
  e8:	81 c3 00 00 01 00    	add    $0x10000,%ebx
	eph = ph + ELFHDR->e_phnum;
  ee:	c1 e0 05             	shl    $0x5,%eax
  f1:	8d 34 03             	lea    (%ebx,%eax,1),%esi
	for (; ph < eph; ph++)
  f4:	eb 14                	jmp    10a <cmain+0x54>
		readseg(ph->p_va, ph->p_memsz, ph->p_offset);
  f6:	ff 73 04             	pushl  0x4(%ebx)
  f9:	ff 73 14             	pushl  0x14(%ebx)
  fc:	ff 73 08             	pushl  0x8(%ebx)
		goto bad;

	// load each program segment (ignores ph flags)
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
	eph = ph + ELFHDR->e_phnum;
	for (; ph < eph; ph++)
  ff:	83 c3 20             	add    $0x20,%ebx
		readseg(ph->p_va, ph->p_memsz, ph->p_offset);
 102:	e8 fc ff ff ff       	call   103 <cmain+0x4d>
		goto bad;

	// load each program segment (ignores ph flags)
	ph = (struct Proghdr *) ((uint8_t *) ELFHDR + ELFHDR->e_phoff);
	eph = ph + ELFHDR->e_phnum;
	for (; ph < eph; ph++)
 107:	83 c4 0c             	add    $0xc,%esp
 10a:	39 f3                	cmp    %esi,%ebx
 10c:	72 e8                	jb     f6 <cmain+0x40>
		readseg(ph->p_va, ph->p_memsz, ph->p_offset);

	// call the entry point from the ELF header
	// note: does not return!
	((void (*)(void)) (ELFHDR->e_entry & 0xFFFFFF))();
 10e:	a1 18 00 01 00       	mov    0x10018,%eax
 113:	25 ff ff ff 00       	and    $0xffffff,%eax
 118:	ff d0                	call   *%eax
}

static __inline void
outw(int port, uint16_t data)
{
	__asm __volatile("outw %0,%w1" : : "a" (data), "d" (port));
 11a:	ba 00 8a 00 00       	mov    $0x8a00,%edx
 11f:	b8 00 8a ff ff       	mov    $0xffff8a00,%eax
 124:	66 ef                	out    %ax,(%dx)
 126:	b8 00 8e ff ff       	mov    $0xffff8e00,%eax
 12b:	66 ef                	out    %ax,(%dx)
 12d:	eb fe                	jmp    12d <cmain+0x77>
